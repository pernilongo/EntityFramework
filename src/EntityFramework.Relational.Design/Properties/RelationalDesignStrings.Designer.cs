// <auto-generated />
namespace Microsoft.Data.Entity.Internal
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;
    using JetBrains.Annotations;

    public static class RelationalDesignStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EntityFramework.Relational.Design.RelationalDesignStrings", typeof(RelationalDesignStrings).GetTypeInfo().Assembly);

        /// <summary>
        /// Could not find type mapping for column '{columnName}' with data type '{dateType}'. Skipping column.
        /// </summary>
        public static string CannotFindTypeMappingForColumn([CanBeNull] object columnName, [CanBeNull] object dateType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotFindTypeMappingForColumn", "columnName", "dateType"), columnName, dateType);
        }

        /// <summary>
        /// Could not scaffold the foreign key '{foreignKeyName}'. A key for '{columnsList}' was not found in the principal entity type '{principalEntityType}'.
        /// </summary>
        public static string ForeignKeyScaffoldErrorPrincipalKeyNotFound([CanBeNull] object foreignKeyName, [CanBeNull] object columnsList, [CanBeNull] object principalEntityType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyScaffoldErrorPrincipalKeyNotFound", "foreignKeyName", "columnsList", "principalEntityType"), foreignKeyName, columnsList, principalEntityType);
        }

        /// <summary>
        /// Could not scaffold the foreign key '{foreignKeyName}'. The referenced table could not be found. This most likely occurred because the referenced table was excluded from scaffolding.
        /// </summary>
        public static string ForeignKeyScaffoldErrorPrincipalTableNotFound([CanBeNull] object foreignKeyName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyScaffoldErrorPrincipalTableNotFound", "foreignKeyName"), foreignKeyName);
        }

        /// <summary>
        /// Could not scaffold the foreign key '{foreignKeyName}'. The referenced table '{principalTableName}' could not be scaffolded.
        /// </summary>
        public static string ForeignKeyScaffoldErrorPrincipalTableScaffoldingError([CanBeNull] object foreignKeyName, [CanBeNull] object principalTableName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyScaffoldErrorPrincipalTableScaffoldingError", "foreignKeyName", "principalTableName"), foreignKeyName, principalTableName);
        }

        /// <summary>
        /// Could not scaffold the foreign key '{foreignKeyName}'.  Some columns in the foreign key could not be scaffolded.
        /// </summary>
        public static string ForeignKeyScaffoldErrorPropertyNotFound([CanBeNull] object foreignKeyName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyScaffoldErrorPropertyNotFound", "foreignKeyName"), foreignKeyName);
        }

        /// <summary>
        /// Could not scaffold the primary key for '{tableName}'. Some columns in the primary key could not be scaffolded.
        /// </summary>
        public static string PrimaryKeyErrorPropertyNotFound([CanBeNull] object tableName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("PrimaryKeyErrorPropertyNotFound", "tableName"), tableName);
        }

        /// <summary>
        /// Unable to identify the primary key for table '{tableName}'.
        /// </summary>
        public static string MissingPrimaryKey([CanBeNull] object tableName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MissingPrimaryKey", "tableName"), tableName);
        }

        /// <summary>
        /// Metadata model returned should not be null. Provider: {providerTypeName}.
        /// </summary>
        public static string ProviderReturnedNullModel([CanBeNull] object providerTypeName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ProviderReturnedNullModel", "providerTypeName"), providerTypeName);
        }

        /// <summary>
        /// No files generated in directory {outputDirectoryName}. The following file(s) already exist and must be made writeable to continue: {readOnlyFiles}.
        /// </summary>
        public static string ReadOnlyFiles([CanBeNull] object outputDirectoryName, [CanBeNull] object readOnlyFiles)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ReadOnlyFiles", "outputDirectoryName", "readOnlyFiles"), outputDirectoryName, readOnlyFiles);
        }

        /// <summary>
        /// Unable to generate entity type for table '{tableName}'.
        /// </summary>
        public static string UnableToGenerateEntityType([CanBeNull] object tableName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToGenerateEntityType", "tableName"), tableName);
        }

        /// <summary>
        /// Unable to scaffold the index '{indexName}' because at least one of the properties it contains could not be scaffolded.
        /// </summary>
        public static string UnableToScaffoldIndex([CanBeNull] object indexName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToScaffoldIndex", "indexName"), indexName);
        }

        /// <summary>
        /// Cannot scaffold the connection string. The "UseProviderMethodName" is missing from the scaffolding model.
        /// </summary>
        public static string MissingUseProviderMethodNameAnnotation
        {
            get { return GetString("MissingUseProviderMethodNameAnnotation"); }
        }

        /// <summary>
        /// The following file(s) already exist in directory {outputDirectoryName}: {existingFiles}. Use the Force flag to overwrite these files.
        /// </summary>
        public static string ExistingFiles([CanBeNull] object outputDirectoryName, [CanBeNull] object existingFiles)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ExistingFiles", "outputDirectoryName", "existingFiles"), outputDirectoryName, existingFiles);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
