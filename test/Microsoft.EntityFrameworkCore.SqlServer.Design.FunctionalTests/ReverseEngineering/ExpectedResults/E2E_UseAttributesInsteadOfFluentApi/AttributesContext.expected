using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace E2ETest.Namespace
{
    public partial class AttributesContext : DbContext
    {
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            #warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
            optionsBuilder.UseSqlServer(@"{{connectionString}}");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AllDataTypes>(entity =>
            {
                entity.Property(e => e.binary111Column).HasColumnType("binary(111)");

                entity.Property(e => e.binaryColumn).HasColumnType("binary(1)");

                entity.Property(e => e.char10Column).HasColumnType("char(10)");

                entity.Property(e => e.charColumn).HasColumnType("char(1)");

                entity.Property(e => e.charVarying144Column).HasColumnType("varchar(144)");

                entity.Property(e => e.charVaryingColumn).HasColumnType("varchar(1)");

                entity.Property(e => e.charVaryingMaxColumn).HasColumnType("varchar(max)");

                entity.Property(e => e.character155Column).HasColumnType("char(155)");

                entity.Property(e => e.characterColumn).HasColumnType("char(1)");

                entity.Property(e => e.characterVarying166Column).HasColumnType("varchar(166)");

                entity.Property(e => e.characterVaryingColumn).HasColumnType("varchar(1)");

                entity.Property(e => e.characterVaryingMaxColumn).HasColumnType("varchar(max)");

                entity.Property(e => e.dateColumn).HasColumnType("date");

                entity.Property(e => e.datetime24Column).HasColumnType("datetime2(4)");

                entity.Property(e => e.datetimeColumn).HasColumnType("datetime");

                entity.Property(e => e.datetimeoffset5Column).HasColumnType("datetimeoffset(5)");

                entity.Property(e => e.decimalColumn).HasColumnType("decimal");

                entity.Property(e => e.imageColumn).HasColumnType("image");

                entity.Property(e => e.moneyColumn).HasColumnType("money");

                entity.Property(e => e.nationalCharacter171Column).HasColumnType("nchar(171)");

                entity.Property(e => e.nationalCharacterColumn).HasColumnType("nchar(1)");

                entity.Property(e => e.nchar99Column).HasColumnType("nchar(99)");

                entity.Property(e => e.ncharColumn).HasColumnType("nchar(1)");

                entity.Property(e => e.ntextColumn).HasColumnType("ntext");

                entity.Property(e => e.numericColumn).HasColumnType("numeric");

                entity.Property(e => e.smalldatetimeColumn).HasColumnType("smalldatetime");

                entity.Property(e => e.smallmoneyColumn).HasColumnType("smallmoney");

                entity.Property(e => e.textColumn).HasColumnType("text");

                entity.Property(e => e.time4Column).HasColumnType("time(4)");

                entity.Property(e => e.timestampColumn)
                    .HasColumnType("timestamp")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.typeAliasColumn).HasColumnType("TestTypeAlias");

                entity.Property(e => e.varchar66Column).HasColumnType("varchar(66)");

                entity.Property(e => e.varcharColumn).HasColumnType("varchar(1)");

                entity.Property(e => e.varcharMaxColumn).HasColumnType("varchar(max)");
            });

            modelBuilder.Entity<MultipleFKsDependent>(entity =>
            {
                entity.Property(e => e.MultipleFKsDependentId).ValueGeneratedNever();
            });

            modelBuilder.Entity<MultipleFKsPrincipal>(entity =>
            {
                entity.Property(e => e.MultipleFKsPrincipalId).ValueGeneratedNever();
            });

            modelBuilder.Entity<OneToManyDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToManyDependentID1, e.OneToManyDependentID2 })
                    .HasName("PK_OneToManyDependent");
            });

            modelBuilder.Entity<OneToManyPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToManyPrincipalID1, e.OneToManyPrincipalID2 })
                    .HasName("PK_OneToManyPrincipal");
            });

            modelBuilder.Entity<OneToOneDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneDependentID1, e.OneToOneDependentID2 })
                    .HasName("PK_OneToOneDependent");
            });

            modelBuilder.Entity<OneToOneFKToUniqueKeyDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneFKToUniqueKeyDependentID1, e.OneToOneFKToUniqueKeyDependentID2 })
                    .HasName("PK_OneToOneFKToUniqueKeyDependent");

                entity.HasIndex(e => new { e.OneToOneFKToUniqueKeyDependentFK1, e.OneToOneFKToUniqueKeyDependentFK2 })
                    .HasName("UK_OneToOneFKToUniqueKeyDependent")
                    .IsUnique();

                entity.HasOne(d => d.OneToOneFKToUniqueKeyDependentFK)
                    .WithOne(p => p.OneToOneFKToUniqueKeyDependent)
                    .HasPrincipalKey<OneToOneFKToUniqueKeyPrincipal>(p => new { p.OneToOneFKToUniqueKeyPrincipalUniqueKey1, p.OneToOneFKToUniqueKeyPrincipalUniqueKey2 })
                    .HasForeignKey<OneToOneFKToUniqueKeyDependent>(d => new { d.OneToOneFKToUniqueKeyDependentFK1, d.OneToOneFKToUniqueKeyDependentFK2 })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_OneToOneFKToUniqueKeyDependent");
            });

            modelBuilder.Entity<OneToOneFKToUniqueKeyPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneFKToUniqueKeyPrincipalID1, e.OneToOneFKToUniqueKeyPrincipalID2 })
                    .HasName("PK_OneToOneFKToUniqueKeyPrincipal");

                entity.HasIndex(e => new { e.OneToOneFKToUniqueKeyPrincipalUniqueKey1, e.OneToOneFKToUniqueKeyPrincipalUniqueKey2 })
                    .HasName("UK_OneToOneFKToUniqueKeyPrincipal")
                    .IsUnique();
            });

            modelBuilder.Entity<OneToOnePrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOnePrincipalID1, e.OneToOnePrincipalID2 })
                    .HasName("PK_OneToOnePrincipal");
            });

            modelBuilder.Entity<OneToOneSeparateFKDependent>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneSeparateFKDependentID1, e.OneToOneSeparateFKDependentID2 })
                    .HasName("PK_OneToOneSeparateFKDependent");

                entity.HasIndex(e => new { e.OneToOneSeparateFKDependentFK1, e.OneToOneSeparateFKDependentFK2 })
                    .HasName("UK_OneToOneSeparateFKDependent")
                    .IsUnique();
            });

            modelBuilder.Entity<OneToOneSeparateFKPrincipal>(entity =>
            {
                entity.HasKey(e => new { e.OneToOneSeparateFKPrincipalID1, e.OneToOneSeparateFKPrincipalID2 })
                    .HasName("PK_OneToOneSeparateFKPrincipal");
            });

            modelBuilder.Entity<PropertyConfiguration>(entity =>
            {
                entity.HasIndex(e => new { e.A, e.B })
                    .HasName("Test_PropertyConfiguration_Index");

                entity.Property(e => e.RowversionColumn)
                    .HasColumnType("timestamp")
                    .ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.SumOfAAndB).ValueGeneratedOnAddOrUpdate();

                entity.Property(e => e.WithDateDefaultExpression).HasDefaultValueSql("getdate()");

                entity.Property(e => e.WithDateFixedDefault).HasDefaultValueSql("'October 20, 2015 11am'");

                entity.Property(e => e.WithDefaultValue).HasDefaultValueSql("-1");

                entity.Property(e => e.WithGuidDefaultExpression).HasDefaultValueSql("newsequentialid()");

                entity.Property(e => e.WithMoneyDefaultValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0.00");

                entity.Property(e => e.WithVarcharNullDefaultValue).HasColumnType("varchar(1)");
            });

            modelBuilder.Entity<ReferredToByTableWithUnmappablePrimaryKeyColumn>(entity =>
            {
                entity.Property(e => e.ReferredToByTableWithUnmappablePrimaryKeyColumnID).ValueGeneratedNever();

                entity.Property(e => e.ValueGeneratedOnAddColumn).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<SelfReferencing>(entity =>
            {
                entity.Property(e => e.SelfReferencingID).ValueGeneratedNever();
            });

            modelBuilder.Entity<Test_Spaces_Keywords_Table>(entity =>
            {
                entity.Property(e => e.Test_Spaces_Keywords_TableID).ValueGeneratedNever();
            });
        }

        public virtual DbSet<AllDataTypes> AllDataTypes { get; set; }
        public virtual DbSet<MultipleFKsDependent> MultipleFKsDependent { get; set; }
        public virtual DbSet<MultipleFKsPrincipal> MultipleFKsPrincipal { get; set; }
        public virtual DbSet<OneToManyDependent> OneToManyDependent { get; set; }
        public virtual DbSet<OneToManyPrincipal> OneToManyPrincipal { get; set; }
        public virtual DbSet<OneToOneDependent> OneToOneDependent { get; set; }
        public virtual DbSet<OneToOneFKToUniqueKeyDependent> OneToOneFKToUniqueKeyDependent { get; set; }
        public virtual DbSet<OneToOneFKToUniqueKeyPrincipal> OneToOneFKToUniqueKeyPrincipal { get; set; }
        public virtual DbSet<OneToOnePrincipal> OneToOnePrincipal { get; set; }
        public virtual DbSet<OneToOneSeparateFKDependent> OneToOneSeparateFKDependent { get; set; }
        public virtual DbSet<OneToOneSeparateFKPrincipal> OneToOneSeparateFKPrincipal { get; set; }
        public virtual DbSet<PropertyConfiguration> PropertyConfiguration { get; set; }
        public virtual DbSet<ReferredToByTableWithUnmappablePrimaryKeyColumn> ReferredToByTableWithUnmappablePrimaryKeyColumn { get; set; }
        public virtual DbSet<SelfReferencing> SelfReferencing { get; set; }
        public virtual DbSet<Test_Spaces_Keywords_Table> Test_Spaces_Keywords_Table { get; set; }

        // Unable to generate entity type for table 'dbo.TableWithUnmappablePrimaryKeyColumn'. Please see the warning messages.
    }
}